using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TestScript : MonoBehaviour
{
    #region setup
    // mesh properties
    Mesh mesh;
    public Vector3[] polygonPoints;
    public int[] polygonTriangles;

    //polygon properties
    public bool isFilled = true;
    public int polygonSides = 3;
    public float polygonRadius = 2;
    public float centreRadius = 0;
    public Color polygonColour = Color.white;

    void Start() {
        mesh = new Mesh();
        this.GetComponent<MeshFilter>().mesh = mesh;
    }

    void Update() {
        if (isFilled) {
            DrawFilled(polygonSides, polygonRadius);
        }
        else {
            DrawHollow(polygonSides, polygonRadius, centreRadius);
        }
    }
    #endregion

    void DrawFilled(int sides, float radius) {
        polygonPoints = GetCircumferencePoints(sides, radius).ToArray();
        polygonTriangles = DrawFilledTriangles(polygonPoints);
        mesh.Clear();
        mesh.vertices = polygonPoints;
        mesh.triangles = polygonTriangles;

        // Create an array of colors and assign to each vertex
        Color[] colors = new Color[polygonPoints.Length];
        for (int i = 0; i < colors.Length; i++) {
            colors[i] = polygonColour;
        }
        mesh.colors = colors;
    }

    List<Vector3> GetCircumferencePoints(int sides, float radius) {
        
        List<Vector3> points = new List<Vector3>();
        float circumferenceProgressPerStep = (float)1/sides;
        float radianProgressPerStep = circumferenceProgressPerStep*Mathf.PI*2;

        for (int i = 0; i<sides; i++) {
            float currentRadian = radianProgressPerStep*i;
            points.Add(new Vector3(Mathf.Cos(currentRadian)*radius, Mathf.Sin(currentRadian)*radius, 0));
        }
        return points;
    }

    int[] DrawFilledTriangles(Vector3[] points) {

        int triangleAmmount = points.Length - 2;
        List<int> newTriangles = new List<int>();

        for (int i = 0; i < triangleAmmount; i++) {

            newTriangles.Add(0);
            newTriangles.Add(i+2);
            newTriangles.Add(i+1);
        }

        return newTriangles.ToArray();
    }

    void DrawHollow(int sides, float outerRadius, float innerRadius) {

        List<Vector3> pointsList = new List<Vector3>();
        List<Vector3> outerPoints = GetCircumferencePoints(sides, outerRadius);
        pointsList.AddRange(outerPoints);
        List<Vector3> innerPoints = GetCircumferencePoints(sides, innerRadius);
        pointsList.AddRange(innerPoints);

        polygonPoints = pointsList.ToArray();

        polygonTriangles = DrawHollowTriangles(polygonPoints);
        mesh.Clear();
        mesh.vertices = polygonPoints;
        mesh.triangles = polygonTriangles;
        // Create an array of colors and assign to each vertex
        Color[] colors = new Color[polygonPoints.Length];
        for (int i = 0; i < colors.Length; i++) {
            colors[i] = polygonColour;
        }
        mesh.colors = colors;
    }

    int[] DrawHollowTriangles(Vector3[] points) {

        int sides = points.Length/2;
        int triangleAmmout = sides*2;

        List<int> newTriangles = new List<int>();

        for (int i= 0; i < sides; i++) {

            int outerIndex = i;
            int innerIndex = i + sides;

            // first triangle starting at outer edge i
            newTriangles.Add(outerIndex);
            newTriangles.Add(innerIndex);
            newTriangles.Add((outerIndex+1)%sides);

            // second triangle starting at outer edge i
            newTriangles.Add(outerIndex);
            newTriangles.Add(sides+((innerIndex-1)%sides));
            newTriangles.Add(innerIndex);
        }
        return newTriangles.ToArray();
    }
}
